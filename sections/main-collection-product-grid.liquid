{{ 'template-collection.css' | asset_url | stylesheet_tag }}
{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'component-price.css' | asset_url | stylesheet_tag }}

{% if section.settings.image_shape == 'blob' %}
  {{ 'mask-blobs.css' | asset_url | stylesheet_tag }}
{%- endif -%}

{%- if settings.enable_quick_add -%}
  {{ 'quick-add.css' | asset_url | stylesheet_tag }}
  <script src="{{ 'quick-add.js' | asset_url }}" defer="defer"></script>
  <script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

<div class="section-{{ section.id }}-padding gradient color-{{ section.settings.color_scheme }}">
  {% comment %}
    <div class="collectiontitle">
     <h1 class="collection-hero__title"><span class="visually-hidden">{{ 'sections.collection_template.title' | t }}: </span>{{- collection.title | escape -}}</h1>
       <p class="product-count__text text-body">
         <span id="ProductCountDesktop">
           {%- if collection.results_count -%}
             ({{'templates.search.results_with_count' | t: terms: collection.terms, count: collection.results_count | remove:'products' | remove_last:' '}})
           {%- elsif collection.products_count == collection.all_products_count -%}
             ({{'products.facets.product_count_simple' | t: count: collection.products_count | remove:'products'| remove_last:' '}})
           {%- else -%}
             ({{'products.facets.product_count' | t: product_count: collection.products_count, count: collection.all_products_count | remove:'products' | remove_last:' ' }})
           {%- endif -%}
         </span>
       </p>
    </div>
  {% endcomment %}
  {%- paginate collection.products by section.settings.products_per_page -%}
    {% comment %} Sort is the first tabbable element when filter type is vertical {% endcomment %}
    {%- if section.settings.enable_sorting and section.settings.filter_type == 'vertical' -%}
      <facet-filters-form class="facets facets-vertical-sort page-width small-hide no-js-hidden">
        <div class="collectiontopbar">
          <div class="collectionInfo">
            <h1 class="collection-hero__title">
              <span class="visually-hidden">{{ 'sections.collection_template.title' | t }}: </span>
              {{- collection.title | escape -}}
              {% if collection %}
                ({{ collection.products_count }})
              {% endif %}
            </h1>
          </div>
          <form class="facets-vertical-form" id="FacetSortForm">
            <div class="facet-filters sorting caption">
              <div class="facet-filters__field">
                <h2 class="facet-filters__label caption-large text-body">
                  <label for="SortBy">{{ 'products.facets.sort_by_label' | t }}</label>
                </h2>
                <div class="select default-vertical-select">
                  {%- assign sort_by = collection.sort_by | default: collection.default_sort_by -%}
                  <select
                    name="sort_by"
                    class="facet-filters__sort select__select caption-large"
                    id="SortBy"
                    aria-describedby="a11y-refresh-page-message"
                  >
                    {%- for option in collection.sort_options -%}
                      <option
                        class="default-sort"
                        value="{{ option.value | escape }}"
                        {% if option.value == sort_by %}
                          selected="selected"
                        {% endif %}
                      >
                        {{ option.name | escape }}
                      </option>
                    {%- endfor -%}
                  </select>
                  {% render 'icon-caret' %}
                </div>
              </div>
              <noscript>
                <button type="submit" class="facets__button-no-js button button--secondary">
                  {{ 'products.facets.sort_button' | t }}
                </button>
              </noscript>
            </div>
            {% comment %}
              <div class="product-count-vertical light" role="status">
                <h2 class="product-count__text text-body">
                  <span id="ProductCountDesktop">
                    {%- if collection.results_count -%}
                      {{
                        'templates.search.results_with_count'
                        | t: terms: collection.terms, count: collection.results_count
                      }}
                    {%- elsif collection.products_count == collection.all_products_count -%}
                      {{ 'products.facets.product_count_simple' | t: count: collection.products_count }}
                    {%- else -%}
                      {{
                        'products.facets.product_count'
                        | t: product_count: collection.products_count, count: collection.all_products_count
                      }}
                    {%- endif -%}
                  </span>
                </h2>
                {%- render 'loading-spinner' -%}
              </div>
            {% endcomment %}
          </form>
        </div>
      </facet-filters-form>
    {%- endif -%}

    <div class="{% if section.settings.filter_type == 'vertical' %} facets-vertical page-width{% endif %}">
      {{ 'component-facets.css' | asset_url | stylesheet_tag }}
      <script src="{{ 'facets.js' | asset_url }}" defer="defer"></script>

      {% if section.settings.filter_type == 'horizontal' or section.settings.filter_type == 'drawer' %}
        <h1 class="collection-hero__title page-width mb-10">
          <span class="visually-hidden">{{ 'sections.collection_template.title' | t }}: </span>
          {{- collection.title | escape -}}
          {% if collection %}
            ({{ collection.products_count }})
          {% endif %}
        </h1>
      {% endif %}

      {% if section.settings.filter_type == 'vertical' %}
        <h1 class="collection-hero__title page-width mb-10 vertHeadMobile">
          <span class="visually-hidden">{{ 'sections.collection_template.title' | t }}: </span>
          {{- collection.title | escape -}}
          {% if collection %}
            ({{ collection.products_count }})
          {% endif %}
        </h1>
      {% endif %}

      {%- if section.settings.enable_filtering or section.settings.enable_sorting -%}
        <aside
          aria-labelledby="verticalTitle"
          class="facets-wrapper{% unless section.settings.enable_filtering %} facets-wrapper--no-filters{% endunless %}{% if section.settings.filter_type != 'vertical' %} page-width{% endif %}"
          id="main-collection-filters"
          data-id="{{ section.id }}"
        >
          {% render 'facets',
            results: collection,
            enable_filtering: section.settings.enable_filtering,
            enable_sorting: section.settings.enable_sorting,
            filter_type: section.settings.filter_type,
            paginate: paginate
          %}
        </aside>
      {%- endif -%}

      <div
        class="
          product-grid-container{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}
          {% if section.settings.filter_type != 'vertical' %}page-width{% endif %}
        "
        id="ProductGridContainer"
        {% if settings.animations_reveal_on_scroll %}
          data-cascade
        {% endif %}
      >
        {%- if collection.products.size == 0 -%}
          <div class="collection collection--empty" id="product-grid" data-id="{{ section.id }}">
            <div class="loading-overlay gradient"></div>
            <div class="title-wrapper center">
              <h2 class="title title--primary">
                {{ 'sections.collection_template.empty' | t -}}
                <br>
                {{
                  'sections.collection_template.use_fewer_filters_html'
                  | t: link: collection.url, class: 'underlined-link link'
                }}
              </h2>
            </div>
          </div>
        {%- else -%}
          <div class="collection">
            <div class="loading-overlay gradient"></div>
            <ul
              id="product-grid"
              data-id="{{ section.id }}"
              class="
                grid product-grid grid--{{ section.settings.columns_mobile }}-col-tablet-down
                grid--{{ section.settings.columns_desktop }}-col-desktop
              "
            >
              {%- for product in collection.products -%}
                {% assign lazy_load = false %}
                {%- if forloop.index > 2 -%}
                  {%- assign lazy_load = true -%}
                {%- endif -%}
                <li
                  class="grid__item{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
                  {% if settings.animations_reveal_on_scroll %}
                    data-cascade
                    style="--animation-order: {{ forloop.index }};"
                  {% endif %}
                >
                  {% render 'card-product',
                    card_product: product,
                    media_aspect_ratio: section.settings.image_ratio,
                    image_shape: section.settings.image_shape,
                    show_secondary_image: section.settings.show_secondary_image,
                    show_vendor: section.settings.show_vendor,
                    show_rating: section.settings.show_rating,
                    lazy_load: lazy_load,
                    show_quick_add: section.settings.enable_quick_add,
                    section_id: section.id
                  %}
                </li>
              {%- endfor -%}
            </ul>

            {% if section.settings.pagInfinScroll == 'pagination' %}
              {%- if paginate.pages > 1 -%}
                {% render 'pagination', paginate: paginate, anchor: '' %}
              {%- endif -%}

            {% elsif section.settings.pagInfinScroll == 'infiniteScroll' %}
              <div id="product-grid-Pagination">
                {% if paginate.next %}
                  <a
                    class="btn btn-outline-primary d-inline-flex align-items-center mt-5 mb-0"
                    href="{{ paginate.next.url }}"
                    onclick="onClickCollectionPagination(this, window.event||event)"
                  >
                  </a>
                {% endif %}
              </div>
            {% endif %}
          </div>
        {%- endif -%}
      </div>
    </div>
  {%- endpaginate -%}
  {% if section.settings.image_shape == 'arch' %}
    {% render 'mask-arch' %}
  {%- endif -%}
</div>

{% comment %}
  ┌──────────────────────────────────────────────────────────────┐
  │ PRICE FILTER SCRIPT                                          │
  └──────────────────────────────────────────────────────────────┘
{% endcomment %}
<script>
  if (/filter.v.price/.test(window.location.href)) {
  } else {
    let highvalue = document.getElementById('Filter-Price-LTE')?.value;
    let highvalueMobile = document.getElementById('Filter-Mobile-Price-LTE')?.value;

    if (highvalue) {
      sessionStorage.setItem('selectedPrice', highvalue);
      sessionStorage.setItem('lowestSelectedPrice', 0);
      sessionStorage.setItem('selectedPricem', highvalue);
      sessionStorage.setItem('lowestSelectedPricem', 0);
    } else if (highvalueMobile) {
      sessionStorage.setItem('selectedPrice', highvalueMobile);
      sessionStorage.setItem('lowestSelectedPrice', 0);
      sessionStorage.setItem('selectedPricem', highvalueMobile);
      sessionStorage.setItem('lowestSelectedPricem', 0);
    }
  }

  function selectedPrice() {
    try {
      if (parseInt(sessionStorage.getItem('selectedPrice'))) {
        const priceRange = parseInt(sessionStorage.getItem('selectedPrice'));
        const lowestPriceRange = parseInt(sessionStorage.getItem('lowestSelectedPrice'));
        const priceRangem = parseInt(sessionStorage.getItem('selectedPricem'));
        const lowestPriceRangem = parseInt(sessionStorage.getItem('lowestSelectedPricem'));
        const priceRangeInputs = document.querySelectorAll('.facets__price input');
        priceRangeInputs[0].value = lowestPriceRange;
        priceRangeInputs[1].value = priceRange;
        priceRangeInputs[2].value = lowestPriceRangem;
        priceRangeInputs[3].value = priceRangem;

        let rangeInput = document.querySelectorAll('.input-range input'),
          progress = document.querySelector('.slider .progress');
        rangeInput[0].value = lowestPriceRange;
        rangeInput[1].value = priceRange;
        rangeInput[2].value = lowestPriceRangem;
        rangeInput[3].value = priceRangem;
        progress.style.right = 100 - (priceRange / rangeInput[1].max) * 100 + '%';
        progress.style.left = (lowestPriceRange / rangeInput[0].max) * 100 + '%';
        let progressmobile = document.querySelector('.slider .progress.mobile');
        progressmobile.style.left = (lowestPriceRangem / rangeInput[2].max) * 100 + '%';
        progressmobile.style.right = 100 - (priceRangem / rangeInput[3].max) * 100 + '%';
      }
      let factremoves = document.querySelectorAll('facet-remove');
      factremoves.forEach(function (els) {
        let secondprices = document.getElementById('Filter-Price-LTE')?.value;
        let secondpricesm = document.getElementById('Mobile-Filter-Price-LTE')?.value;

        els.addEventListener('click', (e) => {
          document.getElementById('Mobile-Filter-Price-GTE').value = '0';
          let highprice = document.getElementById('highprice').value;
          sessionStorage.setItem('selectedPrice', highprice);
          sessionStorage.setItem('lowestSelectedPrice', 0);
          sessionStorage.setItem('selectedPricem', highprice);
          sessionStorage.setItem('lowestSelectedPricem', 0);
        });
      });
    } catch (error) {
      console.log('error', error);
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    if (typeof selectedPrice !== 'undefined') selectedPrice();
  });
</script>

{% comment %}
  ┌──────────────────────────────────────────────────────────────┐
  │ INFINITE SCROLL SCRIPT                                       │
  └──────────────────────────────────────────────────────────────┘
{% endcomment %}

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // select the element you want to observe
    const target = document.querySelector('#product-grid-Pagination');

    if (target) {
      // create a new intersection observer instance
      window.observer1 = new IntersectionObserver((entries) => {
        // callback function called when the observed element intersects with the viewport
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            // do something when the element is in view
            if (document.querySelector('#product-grid-Pagination .btn'))
              document.querySelector('#product-grid-Pagination .btn').click();
          }
        });
      });
      // start observing the target element
      window.observer1.observe(target);
      // Inifinite Pagination
      window.onClickCollectionPagination = async (link, event) => {
        event.preventDefault();
        link.style.width = `${link.offsetWidth}px`;
        link.style.height = `${link.offsetHeight}px`;
        link.innerHTML = `
        <div class="loader">
        </div>
      `;
        const respoonse = await fetch(link.getAttribute('href'));
        const data = await respoonse.text();
        const parser = new DOMParser();
        const newDocument = parser.parseFromString(data, 'text/html');
        document
          .querySelector('.collection .product-grid')
          .insertAdjacentHTML('beforeend', newDocument.querySelector('.collection .product-grid').innerHTML);
        document
          .querySelector('#product-grid-Pagination')
          .replaceWith(newDocument.querySelector('#product-grid-Pagination'));
        window.observer1.observe(document.querySelector('#product-grid-Pagination'));
        const customEvent = new CustomEvent('an.collection.paginated');
        link.dispatchEvent(customEvent);
        loadmore = true;
      };
    }
  });
</script>

{% schema %}
{
  "name": "t:sections.main-collection-product-grid.name",
  "class": "section",
  "settings": [
    {
      "type": "range",
      "id": "products_per_page",
      "min": 8,
      "max": 24,
      "step": 4,
      "default": 16,
      "label": "t:sections.main-collection-product-grid.settings.products_per_page.label"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 3,
      "max": 5,
      "step": 1,
      "default": 4,
      "label": "t:sections.main-collection-product-grid.settings.columns_desktop.label"
    },
    {
      "type": "header",
      "content": "t:sections.main-collection-product-grid.settings.header__3.content"
    },
    {
      "type": "header",
      "content": "t:sections.main-collection-product-grid.settings.header__1.content"
    },
    {
      "type": "checkbox",
      "id": "enable_filtering",
      "default": true,
      "label": "t:sections.main-collection-product-grid.settings.enable_filtering.label",
      "info": "t:sections.main-collection-product-grid.settings.enable_filtering.info"
    },
    {
      "type": "select",
      "id": "filter_type",
      "options": [
        {
          "value": "horizontal",
          "label": "t:sections.main-collection-product-grid.settings.filter_type.options__1.label"
        },
        {
          "value": "vertical",
          "label": "t:sections.main-collection-product-grid.settings.filter_type.options__2.label"
        },
        {
          "value": "drawer",
          "label": "t:sections.main-collection-product-grid.settings.filter_type.options__3.label"
        }
      ],
      "default": "horizontal",
      "label": "t:sections.main-collection-product-grid.settings.filter_type.label",
      "info": "t:sections.main-collection-product-grid.settings.filter_type.info"
    },
    {
      "type": "checkbox",
      "id": "enable_sorting",
      "default": true,
      "label": "t:sections.main-collection-product-grid.settings.enable_sorting.label"
    },
    {
      "type": "header",
      "content": "t:sections.main-collection-product-grid.settings.header_mobile.content"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "default": "2",
      "label": "t:sections.main-collection-product-grid.settings.columns_mobile.label",
      "options": [
        {
          "value": "1",
          "label": "t:sections.main-collection-product-grid.settings.columns_mobile.options__1.label"
        },
        {
          "value": "2",
          "label": "t:sections.main-collection-product-grid.settings.columns_mobile.options__2.label"
        }
      ]
    },
    {
      "type": "header",
      "content": "Pagination or Infinite Scroll"
    },
    {
      "type": "radio",
      "id": "pagInfinScroll",
      "label": "Select the option for Pagination or Infinite Scroll",
      "options": [
        {
          "value": "pagination",
          "label": "Pagination"
        },
        {
          "value": "infiniteScroll",
          "label": "Infinite Scroll"
        }
      ],
      "default": "pagination"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ]
}
{% endschema %}
